// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Activity Workflow activity parameters
// swagger:model activity
type Activity struct {

	// Error explanation
	Error *ActivityError `json:"error,omitempty"`

	// ID of activity
	// Required: true
	ID *string `json:"id"`

	// Completion percentage for activity
	PercentComplete int32 `json:"percentComplete,omitempty"`

	// Activity output serialized into a json string
	Result string `json:"result,omitempty"`

	// Status of activity
	// Required: true
	Status *string `json:"status"`
}

// Validate validates this activity
func (m *Activity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateError(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Activity) validateError(formats strfmt.Registry) error {

	if swag.IsZero(m.Error) { // not required
		return nil
	}

	if m.Error != nil {

		if err := m.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("error")
			}
			return err
		}
	}

	return nil
}

func (m *Activity) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

var activityTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Running","Failed","Completed","Cancelled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		activityTypeStatusPropEnum = append(activityTypeStatusPropEnum, v)
	}
}

const (
	// ActivityStatusRunning captures enum value "Running"
	ActivityStatusRunning string = "Running"
	// ActivityStatusFailed captures enum value "Failed"
	ActivityStatusFailed string = "Failed"
	// ActivityStatusCompleted captures enum value "Completed"
	ActivityStatusCompleted string = "Completed"
	// ActivityStatusCancelled captures enum value "Cancelled"
	ActivityStatusCancelled string = "Cancelled"
)

// prop value enum
func (m *Activity) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, activityTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Activity) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Activity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Activity) UnmarshalBinary(b []byte) error {
	var res Activity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
