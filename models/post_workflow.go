// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PostWorkflow Workflow activity parameters
// swagger:model postWorkflow
type PostWorkflow struct {

	// Identifier for simulation, part or buildfile depending on workflow type
	// Required: true
	EntityID *int32 `json:"entityId"`

	// organization Id
	// Required: true
	OrganizationID *int32 `json:"organizationId"`

	// True if distortion compensation needs to be performed
	RunDistortionCompensation bool `json:"runDistortionCompensation,omitempty"`

	// True if support optimization needs to be performed
	RunSupportOptimization bool `json:"runSupportOptimization,omitempty"`

	// workflow type
	// Required: true
	WorkflowType *string `json:"workflowType"`
}

// Validate validates this post workflow
func (m *PostWorkflow) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEntityID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateOrganizationID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateWorkflowType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PostWorkflow) validateEntityID(formats strfmt.Registry) error {

	if err := validate.Required("entityId", "body", m.EntityID); err != nil {
		return err
	}

	return nil
}

func (m *PostWorkflow) validateOrganizationID(formats strfmt.Registry) error {

	if err := validate.Required("organizationId", "body", m.OrganizationID); err != nil {
		return err
	}

	return nil
}

var postWorkflowTypeWorkflowTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AssumedStrain","Part","BuildFile"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		postWorkflowTypeWorkflowTypePropEnum = append(postWorkflowTypeWorkflowTypePropEnum, v)
	}
}

const (
	// PostWorkflowWorkflowTypeAssumedStrain captures enum value "AssumedStrain"
	PostWorkflowWorkflowTypeAssumedStrain string = "AssumedStrain"
	// PostWorkflowWorkflowTypePart captures enum value "Part"
	PostWorkflowWorkflowTypePart string = "Part"
	// PostWorkflowWorkflowTypeBuildFile captures enum value "BuildFile"
	PostWorkflowWorkflowTypeBuildFile string = "BuildFile"
)

// prop value enum
func (m *PostWorkflow) validateWorkflowTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, postWorkflowTypeWorkflowTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *PostWorkflow) validateWorkflowType(formats strfmt.Registry) error {

	if err := validate.Required("workflowType", "body", m.WorkflowType); err != nil {
		return err
	}

	// value enum
	if err := m.validateWorkflowTypeEnum("workflowType", "body", *m.WorkflowType); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PostWorkflow) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PostWorkflow) UnmarshalBinary(b []byte) error {
	var res PostWorkflow
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
