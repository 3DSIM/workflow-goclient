// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DynamicWorkflow dynamic workflow
// swagger:model dynamicWorkflow
type DynamicWorkflow struct {

	// complete
	Complete *bool `json:"complete,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// nodes
	Nodes []*Node `json:"nodes"`

	// start
	Start int64 `json:"start,omitempty"`

	// Workflow Status Test Enum!
	Status string `json:"status,omitempty"`
}

// Validate validates this dynamic workflow
func (m *DynamicWorkflow) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNodes(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DynamicWorkflow) validateNodes(formats strfmt.Registry) error {

	if swag.IsZero(m.Nodes) { // not required
		return nil
	}

	for i := 0; i < len(m.Nodes); i++ {

		if swag.IsZero(m.Nodes[i]) { // not required
			continue
		}

		if m.Nodes[i] != nil {

			if err := m.Nodes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nodes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var dynamicWorkflowTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Started","Running","Aborted"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		dynamicWorkflowTypeStatusPropEnum = append(dynamicWorkflowTypeStatusPropEnum, v)
	}
}

const (
	// DynamicWorkflowStatusStarted captures enum value "Started"
	DynamicWorkflowStatusStarted string = "Started"
	// DynamicWorkflowStatusRunning captures enum value "Running"
	DynamicWorkflowStatusRunning string = "Running"
	// DynamicWorkflowStatusAborted captures enum value "Aborted"
	DynamicWorkflowStatusAborted string = "Aborted"
)

// prop value enum
func (m *DynamicWorkflow) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, dynamicWorkflowTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *DynamicWorkflow) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DynamicWorkflow) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DynamicWorkflow) UnmarshalBinary(b []byte) error {
	var res DynamicWorkflow
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
