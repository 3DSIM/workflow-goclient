// This file was generated by counterfeiter
package workflowfakes

import (
	"sync"

	"github.com/3dsim/workflow-goclient/models"
	"github.com/3dsim/workflow-goclient/workflow"
)

type FakeClient struct {
	WorkflowStub        func(workflowID string) (*models.Workflow, error)
	workflowMutex       sync.RWMutex
	workflowArgsForCall []struct {
		workflowID string
	}
	workflowReturns struct {
		result1 *models.Workflow
		result2 error
	}
	workflowReturnsOnCall map[int]struct {
		result1 *models.Workflow
		result2 error
	}
	CancelWorkflowStub        func(workflowID string) error
	cancelWorkflowMutex       sync.RWMutex
	cancelWorkflowArgsForCall []struct {
		workflowID string
	}
	cancelWorkflowReturns struct {
		result1 error
	}
	cancelWorkflowReturnsOnCall map[int]struct {
		result1 error
	}
	SignalWorkflowStub        func(workflowID string, signal *models.Signal) error
	signalWorkflowMutex       sync.RWMutex
	signalWorkflowArgsForCall []struct {
		workflowID string
		signal     *models.Signal
	}
	signalWorkflowReturns struct {
		result1 error
	}
	signalWorkflowReturnsOnCall map[int]struct {
		result1 error
	}
	UpdateActivityStub        func(workflowID string, activity *models.Activity) (*models.Activity, error)
	updateActivityMutex       sync.RWMutex
	updateActivityArgsForCall []struct {
		workflowID string
		activity   *models.Activity
	}
	updateActivityReturns struct {
		result1 *models.Activity
		result2 error
	}
	updateActivityReturnsOnCall map[int]struct {
		result1 *models.Activity
		result2 error
	}
	HeartbeatActivityStub        func(workflowID string, activityID string) (*models.Heartbeat, error)
	heartbeatActivityMutex       sync.RWMutex
	heartbeatActivityArgsForCall []struct {
		workflowID string
		activityID string
	}
	heartbeatActivityReturns struct {
		result1 *models.Heartbeat
		result2 error
	}
	heartbeatActivityReturnsOnCall map[int]struct {
		result1 *models.Heartbeat
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeClient) Workflow(workflowID string) (*models.Workflow, error) {
	fake.workflowMutex.Lock()
	ret, specificReturn := fake.workflowReturnsOnCall[len(fake.workflowArgsForCall)]
	fake.workflowArgsForCall = append(fake.workflowArgsForCall, struct {
		workflowID string
	}{workflowID})
	fake.recordInvocation("Workflow", []interface{}{workflowID})
	fake.workflowMutex.Unlock()
	if fake.WorkflowStub != nil {
		return fake.WorkflowStub(workflowID)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.workflowReturns.result1, fake.workflowReturns.result2
}

func (fake *FakeClient) WorkflowCallCount() int {
	fake.workflowMutex.RLock()
	defer fake.workflowMutex.RUnlock()
	return len(fake.workflowArgsForCall)
}

func (fake *FakeClient) WorkflowArgsForCall(i int) string {
	fake.workflowMutex.RLock()
	defer fake.workflowMutex.RUnlock()
	return fake.workflowArgsForCall[i].workflowID
}

func (fake *FakeClient) WorkflowReturns(result1 *models.Workflow, result2 error) {
	fake.WorkflowStub = nil
	fake.workflowReturns = struct {
		result1 *models.Workflow
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) WorkflowReturnsOnCall(i int, result1 *models.Workflow, result2 error) {
	fake.WorkflowStub = nil
	if fake.workflowReturnsOnCall == nil {
		fake.workflowReturnsOnCall = make(map[int]struct {
			result1 *models.Workflow
			result2 error
		})
	}
	fake.workflowReturnsOnCall[i] = struct {
		result1 *models.Workflow
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) CancelWorkflow(workflowID string) error {
	fake.cancelWorkflowMutex.Lock()
	ret, specificReturn := fake.cancelWorkflowReturnsOnCall[len(fake.cancelWorkflowArgsForCall)]
	fake.cancelWorkflowArgsForCall = append(fake.cancelWorkflowArgsForCall, struct {
		workflowID string
	}{workflowID})
	fake.recordInvocation("CancelWorkflow", []interface{}{workflowID})
	fake.cancelWorkflowMutex.Unlock()
	if fake.CancelWorkflowStub != nil {
		return fake.CancelWorkflowStub(workflowID)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.cancelWorkflowReturns.result1
}

func (fake *FakeClient) CancelWorkflowCallCount() int {
	fake.cancelWorkflowMutex.RLock()
	defer fake.cancelWorkflowMutex.RUnlock()
	return len(fake.cancelWorkflowArgsForCall)
}

func (fake *FakeClient) CancelWorkflowArgsForCall(i int) string {
	fake.cancelWorkflowMutex.RLock()
	defer fake.cancelWorkflowMutex.RUnlock()
	return fake.cancelWorkflowArgsForCall[i].workflowID
}

func (fake *FakeClient) CancelWorkflowReturns(result1 error) {
	fake.CancelWorkflowStub = nil
	fake.cancelWorkflowReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeClient) CancelWorkflowReturnsOnCall(i int, result1 error) {
	fake.CancelWorkflowStub = nil
	if fake.cancelWorkflowReturnsOnCall == nil {
		fake.cancelWorkflowReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.cancelWorkflowReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeClient) SignalWorkflow(workflowID string, signal *models.Signal) error {
	fake.signalWorkflowMutex.Lock()
	ret, specificReturn := fake.signalWorkflowReturnsOnCall[len(fake.signalWorkflowArgsForCall)]
	fake.signalWorkflowArgsForCall = append(fake.signalWorkflowArgsForCall, struct {
		workflowID string
		signal     *models.Signal
	}{workflowID, signal})
	fake.recordInvocation("SignalWorkflow", []interface{}{workflowID, signal})
	fake.signalWorkflowMutex.Unlock()
	if fake.SignalWorkflowStub != nil {
		return fake.SignalWorkflowStub(workflowID, signal)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.signalWorkflowReturns.result1
}

func (fake *FakeClient) SignalWorkflowCallCount() int {
	fake.signalWorkflowMutex.RLock()
	defer fake.signalWorkflowMutex.RUnlock()
	return len(fake.signalWorkflowArgsForCall)
}

func (fake *FakeClient) SignalWorkflowArgsForCall(i int) (string, *models.Signal) {
	fake.signalWorkflowMutex.RLock()
	defer fake.signalWorkflowMutex.RUnlock()
	return fake.signalWorkflowArgsForCall[i].workflowID, fake.signalWorkflowArgsForCall[i].signal
}

func (fake *FakeClient) SignalWorkflowReturns(result1 error) {
	fake.SignalWorkflowStub = nil
	fake.signalWorkflowReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeClient) SignalWorkflowReturnsOnCall(i int, result1 error) {
	fake.SignalWorkflowStub = nil
	if fake.signalWorkflowReturnsOnCall == nil {
		fake.signalWorkflowReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.signalWorkflowReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeClient) UpdateActivity(workflowID string, activity *models.Activity) (*models.Activity, error) {
	fake.updateActivityMutex.Lock()
	ret, specificReturn := fake.updateActivityReturnsOnCall[len(fake.updateActivityArgsForCall)]
	fake.updateActivityArgsForCall = append(fake.updateActivityArgsForCall, struct {
		workflowID string
		activity   *models.Activity
	}{workflowID, activity})
	fake.recordInvocation("UpdateActivity", []interface{}{workflowID, activity})
	fake.updateActivityMutex.Unlock()
	if fake.UpdateActivityStub != nil {
		return fake.UpdateActivityStub(workflowID, activity)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.updateActivityReturns.result1, fake.updateActivityReturns.result2
}

func (fake *FakeClient) UpdateActivityCallCount() int {
	fake.updateActivityMutex.RLock()
	defer fake.updateActivityMutex.RUnlock()
	return len(fake.updateActivityArgsForCall)
}

func (fake *FakeClient) UpdateActivityArgsForCall(i int) (string, *models.Activity) {
	fake.updateActivityMutex.RLock()
	defer fake.updateActivityMutex.RUnlock()
	return fake.updateActivityArgsForCall[i].workflowID, fake.updateActivityArgsForCall[i].activity
}

func (fake *FakeClient) UpdateActivityReturns(result1 *models.Activity, result2 error) {
	fake.UpdateActivityStub = nil
	fake.updateActivityReturns = struct {
		result1 *models.Activity
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) UpdateActivityReturnsOnCall(i int, result1 *models.Activity, result2 error) {
	fake.UpdateActivityStub = nil
	if fake.updateActivityReturnsOnCall == nil {
		fake.updateActivityReturnsOnCall = make(map[int]struct {
			result1 *models.Activity
			result2 error
		})
	}
	fake.updateActivityReturnsOnCall[i] = struct {
		result1 *models.Activity
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) HeartbeatActivity(workflowID string, activityID string) (*models.Heartbeat, error) {
	fake.heartbeatActivityMutex.Lock()
	ret, specificReturn := fake.heartbeatActivityReturnsOnCall[len(fake.heartbeatActivityArgsForCall)]
	fake.heartbeatActivityArgsForCall = append(fake.heartbeatActivityArgsForCall, struct {
		workflowID string
		activityID string
	}{workflowID, activityID})
	fake.recordInvocation("HeartbeatActivity", []interface{}{workflowID, activityID})
	fake.heartbeatActivityMutex.Unlock()
	if fake.HeartbeatActivityStub != nil {
		return fake.HeartbeatActivityStub(workflowID, activityID)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.heartbeatActivityReturns.result1, fake.heartbeatActivityReturns.result2
}

func (fake *FakeClient) HeartbeatActivityCallCount() int {
	fake.heartbeatActivityMutex.RLock()
	defer fake.heartbeatActivityMutex.RUnlock()
	return len(fake.heartbeatActivityArgsForCall)
}

func (fake *FakeClient) HeartbeatActivityArgsForCall(i int) (string, string) {
	fake.heartbeatActivityMutex.RLock()
	defer fake.heartbeatActivityMutex.RUnlock()
	return fake.heartbeatActivityArgsForCall[i].workflowID, fake.heartbeatActivityArgsForCall[i].activityID
}

func (fake *FakeClient) HeartbeatActivityReturns(result1 *models.Heartbeat, result2 error) {
	fake.HeartbeatActivityStub = nil
	fake.heartbeatActivityReturns = struct {
		result1 *models.Heartbeat
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) HeartbeatActivityReturnsOnCall(i int, result1 *models.Heartbeat, result2 error) {
	fake.HeartbeatActivityStub = nil
	if fake.heartbeatActivityReturnsOnCall == nil {
		fake.heartbeatActivityReturnsOnCall = make(map[int]struct {
			result1 *models.Heartbeat
			result2 error
		})
	}
	fake.heartbeatActivityReturnsOnCall[i] = struct {
		result1 *models.Heartbeat
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.workflowMutex.RLock()
	defer fake.workflowMutex.RUnlock()
	fake.cancelWorkflowMutex.RLock()
	defer fake.cancelWorkflowMutex.RUnlock()
	fake.signalWorkflowMutex.RLock()
	defer fake.signalWorkflowMutex.RUnlock()
	fake.updateActivityMutex.RLock()
	defer fake.updateActivityMutex.RUnlock()
	fake.heartbeatActivityMutex.RLock()
	defer fake.heartbeatActivityMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ workflow.Client = new(FakeClient)
