// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/3dsim/workflow-goclient/models"
)

// SignalWorkflowReader is a Reader for the SignalWorkflow structure.
type SignalWorkflowReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SignalWorkflowReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewSignalWorkflowOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewSignalWorkflowUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewSignalWorkflowForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewSignalWorkflowNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewSignalWorkflowDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewSignalWorkflowOK creates a SignalWorkflowOK with default headers values
func NewSignalWorkflowOK() *SignalWorkflowOK {
	return &SignalWorkflowOK{}
}

/*SignalWorkflowOK handles this case with default header values.

Successfully sent the signal
*/
type SignalWorkflowOK struct {
}

func (o *SignalWorkflowOK) Error() string {
	return fmt.Sprintf("[POST /workflows/{id}/signals][%d] signalWorkflowOK ", 200)
}

func (o *SignalWorkflowOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewSignalWorkflowUnauthorized creates a SignalWorkflowUnauthorized with default headers values
func NewSignalWorkflowUnauthorized() *SignalWorkflowUnauthorized {
	return &SignalWorkflowUnauthorized{}
}

/*SignalWorkflowUnauthorized handles this case with default header values.

Not authorized
*/
type SignalWorkflowUnauthorized struct {
	Payload *models.Error
}

func (o *SignalWorkflowUnauthorized) Error() string {
	return fmt.Sprintf("[POST /workflows/{id}/signals][%d] signalWorkflowUnauthorized  %+v", 401, o.Payload)
}

func (o *SignalWorkflowUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSignalWorkflowForbidden creates a SignalWorkflowForbidden with default headers values
func NewSignalWorkflowForbidden() *SignalWorkflowForbidden {
	return &SignalWorkflowForbidden{}
}

/*SignalWorkflowForbidden handles this case with default header values.

Forbidden
*/
type SignalWorkflowForbidden struct {
	Payload *models.Error
}

func (o *SignalWorkflowForbidden) Error() string {
	return fmt.Sprintf("[POST /workflows/{id}/signals][%d] signalWorkflowForbidden  %+v", 403, o.Payload)
}

func (o *SignalWorkflowForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSignalWorkflowNotFound creates a SignalWorkflowNotFound with default headers values
func NewSignalWorkflowNotFound() *SignalWorkflowNotFound {
	return &SignalWorkflowNotFound{}
}

/*SignalWorkflowNotFound handles this case with default header values.

Resource not found
*/
type SignalWorkflowNotFound struct {
	Payload *models.Error
}

func (o *SignalWorkflowNotFound) Error() string {
	return fmt.Sprintf("[POST /workflows/{id}/signals][%d] signalWorkflowNotFound  %+v", 404, o.Payload)
}

func (o *SignalWorkflowNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSignalWorkflowDefault creates a SignalWorkflowDefault with default headers values
func NewSignalWorkflowDefault(code int) *SignalWorkflowDefault {
	return &SignalWorkflowDefault{
		_statusCode: code,
	}
}

/*SignalWorkflowDefault handles this case with default header values.

error
*/
type SignalWorkflowDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the signal workflow default response
func (o *SignalWorkflowDefault) Code() int {
	return o._statusCode
}

func (o *SignalWorkflowDefault) Error() string {
	return fmt.Sprintf("[POST /workflows/{id}/signals][%d] signalWorkflow default  %+v", o._statusCode, o.Payload)
}

func (o *SignalWorkflowDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
