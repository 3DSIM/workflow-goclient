// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/3dsim/workflow-goclient/models"
)

// GetWorkflowReader is a Reader for the GetWorkflow structure.
type GetWorkflowReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetWorkflowReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetWorkflowOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewGetWorkflowUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewGetWorkflowForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewGetWorkflowNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewGetWorkflowDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetWorkflowOK creates a GetWorkflowOK with default headers values
func NewGetWorkflowOK() *GetWorkflowOK {
	return &GetWorkflowOK{}
}

/*GetWorkflowOK handles this case with default header values.

Got the workflow by id
*/
type GetWorkflowOK struct {
	Payload *models.Workflow
}

func (o *GetWorkflowOK) Error() string {
	return fmt.Sprintf("[GET /workflows/{id}][%d] getWorkflowOK  %+v", 200, o.Payload)
}

func (o *GetWorkflowOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Workflow)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetWorkflowUnauthorized creates a GetWorkflowUnauthorized with default headers values
func NewGetWorkflowUnauthorized() *GetWorkflowUnauthorized {
	return &GetWorkflowUnauthorized{}
}

/*GetWorkflowUnauthorized handles this case with default header values.

Not authorized
*/
type GetWorkflowUnauthorized struct {
	Payload *models.Error
}

func (o *GetWorkflowUnauthorized) Error() string {
	return fmt.Sprintf("[GET /workflows/{id}][%d] getWorkflowUnauthorized  %+v", 401, o.Payload)
}

func (o *GetWorkflowUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetWorkflowForbidden creates a GetWorkflowForbidden with default headers values
func NewGetWorkflowForbidden() *GetWorkflowForbidden {
	return &GetWorkflowForbidden{}
}

/*GetWorkflowForbidden handles this case with default header values.

Forbidden
*/
type GetWorkflowForbidden struct {
	Payload *models.Error
}

func (o *GetWorkflowForbidden) Error() string {
	return fmt.Sprintf("[GET /workflows/{id}][%d] getWorkflowForbidden  %+v", 403, o.Payload)
}

func (o *GetWorkflowForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetWorkflowNotFound creates a GetWorkflowNotFound with default headers values
func NewGetWorkflowNotFound() *GetWorkflowNotFound {
	return &GetWorkflowNotFound{}
}

/*GetWorkflowNotFound handles this case with default header values.

Resource not found
*/
type GetWorkflowNotFound struct {
	Payload *models.Error
}

func (o *GetWorkflowNotFound) Error() string {
	return fmt.Sprintf("[GET /workflows/{id}][%d] getWorkflowNotFound  %+v", 404, o.Payload)
}

func (o *GetWorkflowNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetWorkflowDefault creates a GetWorkflowDefault with default headers values
func NewGetWorkflowDefault(code int) *GetWorkflowDefault {
	return &GetWorkflowDefault{
		_statusCode: code,
	}
}

/*GetWorkflowDefault handles this case with default header values.

error
*/
type GetWorkflowDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the get workflow default response
func (o *GetWorkflowDefault) Code() int {
	return o._statusCode
}

func (o *GetWorkflowDefault) Error() string {
	return fmt.Sprintf("[GET /workflows/{id}][%d] getWorkflow default  %+v", o._statusCode, o.Payload)
}

func (o *GetWorkflowDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
