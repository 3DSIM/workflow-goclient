// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/3dsim/workflow-goclient/models"
)

// NewActivityHeartbeatParams creates a new ActivityHeartbeatParams object
// with the default values initialized.
func NewActivityHeartbeatParams() *ActivityHeartbeatParams {
	var ()
	return &ActivityHeartbeatParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewActivityHeartbeatParamsWithTimeout creates a new ActivityHeartbeatParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewActivityHeartbeatParamsWithTimeout(timeout time.Duration) *ActivityHeartbeatParams {
	var ()
	return &ActivityHeartbeatParams{

		timeout: timeout,
	}
}

// NewActivityHeartbeatParamsWithContext creates a new ActivityHeartbeatParams object
// with the default values initialized, and the ability to set a context for a request
func NewActivityHeartbeatParamsWithContext(ctx context.Context) *ActivityHeartbeatParams {
	var ()
	return &ActivityHeartbeatParams{

		Context: ctx,
	}
}

// NewActivityHeartbeatParamsWithHTTPClient creates a new ActivityHeartbeatParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewActivityHeartbeatParamsWithHTTPClient(client *http.Client) *ActivityHeartbeatParams {
	var ()
	return &ActivityHeartbeatParams{
		HTTPClient: client,
	}
}

/*ActivityHeartbeatParams contains all the parameters to send to the API endpoint
for the activity heartbeat operation typically these are written to a http.Request
*/
type ActivityHeartbeatParams struct {

	/*ActivityID
	  ID of activity

	*/
	ActivityID string
	/*Heartbeat*/
	Heartbeat *models.Heartbeat
	/*ID
	  ID of workflow

	*/
	ID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the activity heartbeat params
func (o *ActivityHeartbeatParams) WithTimeout(timeout time.Duration) *ActivityHeartbeatParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the activity heartbeat params
func (o *ActivityHeartbeatParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the activity heartbeat params
func (o *ActivityHeartbeatParams) WithContext(ctx context.Context) *ActivityHeartbeatParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the activity heartbeat params
func (o *ActivityHeartbeatParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the activity heartbeat params
func (o *ActivityHeartbeatParams) WithHTTPClient(client *http.Client) *ActivityHeartbeatParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the activity heartbeat params
func (o *ActivityHeartbeatParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithActivityID adds the activityID to the activity heartbeat params
func (o *ActivityHeartbeatParams) WithActivityID(activityID string) *ActivityHeartbeatParams {
	o.SetActivityID(activityID)
	return o
}

// SetActivityID adds the activityId to the activity heartbeat params
func (o *ActivityHeartbeatParams) SetActivityID(activityID string) {
	o.ActivityID = activityID
}

// WithHeartbeat adds the heartbeat to the activity heartbeat params
func (o *ActivityHeartbeatParams) WithHeartbeat(heartbeat *models.Heartbeat) *ActivityHeartbeatParams {
	o.SetHeartbeat(heartbeat)
	return o
}

// SetHeartbeat adds the heartbeat to the activity heartbeat params
func (o *ActivityHeartbeatParams) SetHeartbeat(heartbeat *models.Heartbeat) {
	o.Heartbeat = heartbeat
}

// WithID adds the id to the activity heartbeat params
func (o *ActivityHeartbeatParams) WithID(id string) *ActivityHeartbeatParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the activity heartbeat params
func (o *ActivityHeartbeatParams) SetID(id string) {
	o.ID = id
}

// WriteToRequest writes these params to a swagger request
func (o *ActivityHeartbeatParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param activityId
	if err := r.SetPathParam("activityId", o.ActivityID); err != nil {
		return err
	}

	if o.Heartbeat == nil {
		o.Heartbeat = new(models.Heartbeat)
	}

	if err := r.SetBodyParam(o.Heartbeat); err != nil {
		return err
	}

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
