// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/3dsim/workflow-goclient/models"
)

// NewSignalWorkflowParams creates a new SignalWorkflowParams object
// with the default values initialized.
func NewSignalWorkflowParams() *SignalWorkflowParams {
	var ()
	return &SignalWorkflowParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewSignalWorkflowParamsWithTimeout creates a new SignalWorkflowParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewSignalWorkflowParamsWithTimeout(timeout time.Duration) *SignalWorkflowParams {
	var ()
	return &SignalWorkflowParams{

		timeout: timeout,
	}
}

// NewSignalWorkflowParamsWithContext creates a new SignalWorkflowParams object
// with the default values initialized, and the ability to set a context for a request
func NewSignalWorkflowParamsWithContext(ctx context.Context) *SignalWorkflowParams {
	var ()
	return &SignalWorkflowParams{

		Context: ctx,
	}
}

// NewSignalWorkflowParamsWithHTTPClient creates a new SignalWorkflowParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewSignalWorkflowParamsWithHTTPClient(client *http.Client) *SignalWorkflowParams {
	var ()
	return &SignalWorkflowParams{
		HTTPClient: client,
	}
}

/*SignalWorkflowParams contains all the parameters to send to the API endpoint
for the signal workflow operation typically these are written to a http.Request
*/
type SignalWorkflowParams struct {

	/*ID*/
	ID string
	/*Signal*/
	Signal *models.Signal

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the signal workflow params
func (o *SignalWorkflowParams) WithTimeout(timeout time.Duration) *SignalWorkflowParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the signal workflow params
func (o *SignalWorkflowParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the signal workflow params
func (o *SignalWorkflowParams) WithContext(ctx context.Context) *SignalWorkflowParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the signal workflow params
func (o *SignalWorkflowParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the signal workflow params
func (o *SignalWorkflowParams) WithHTTPClient(client *http.Client) *SignalWorkflowParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the signal workflow params
func (o *SignalWorkflowParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithID adds the id to the signal workflow params
func (o *SignalWorkflowParams) WithID(id string) *SignalWorkflowParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the signal workflow params
func (o *SignalWorkflowParams) SetID(id string) {
	o.ID = id
}

// WithSignal adds the signal to the signal workflow params
func (o *SignalWorkflowParams) WithSignal(signal *models.Signal) *SignalWorkflowParams {
	o.SetSignal(signal)
	return o
}

// SetSignal adds the signal to the signal workflow params
func (o *SignalWorkflowParams) SetSignal(signal *models.Signal) {
	o.Signal = signal
}

// WriteToRequest writes these params to a swagger request
func (o *SignalWorkflowParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}

	if o.Signal == nil {
		o.Signal = new(models.Signal)
	}

	if err := r.SetBodyParam(o.Signal); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
